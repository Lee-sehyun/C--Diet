다이나믹 프로그래밍(DP)


코드 실행 시간을 줄이기 위한 방법으로 다이나믹 프로그래밍 즉, DP가 있다.
DP는 주어진 문제를 여러 개의 부분 문제로 나누어 부분 문제의 답을 계산하고,
다음에 다시 같은 부분 문제를 풀게 되었을 때,
이미 계산한 값을 가져와 다시 계산 할 필요 없이 답을 구하는 방법이다.

DP를 활용하기 위해서는 메모이제이션이 필요하다. 
모든 DP가 메모이제이션은 아니지만, 연관성은 매우 깊다.
메모이제이션이란 이전에 계산한 값을 메모리에 저장함으로써 동일한 계산을 제거하여 
프로그램 속도를 빠르게 하는 기술이다.

DP의 시작은 그 문제의 점화식을 이해하는 것부터 시작한다.
점화식이란 귀납적으로 주어진 수열의 일반항을 n의 명시적인 식으로 나타낸 것을 말한다.
이 점화식을 이용하여 큰 문제를 더 작은 문제들로 나눈 뒤, 
작은 문제들의 값을 구한 뒤 더 큰 문제의 답을 구힌다.
이때 거의 필연적으로 같은 방식의 문제를 여러번 구하게 되는데,
이렇게 되면 문제를 푸는데 걸리는 시간이 길어지게 된다.
DP에서는 이를 메모이제이션을 비롯한 방법으로 해결한다.

DP에는 2가지 방법이 있다.
1. 재귀 호출을 사용하는 탑다운 방식
-> 가장 큰 문제부터 작은 문제들을 찾아 보는 방법
장점: 좋은 가독성, 본래 점화식을 이해하기 수월

2. 반복문을 사용하는 바텀업 방식
-> 가장 작은 문제부터 차근차근 답을 쌓아 가는 방법
장점: 탑다운 방식보다 시간과 메모리 절약 